[user]
    email = luiscachog@gmail.com
    name = Luis Cacho
    signingKey = null

[includeIf "gitdir:~/workspace/repos/rh/"]
    path = ~/.git.d/gitconfig-rh
[includeIf "gitdir:~/workspace/repos/rax/"]
    path = ~/.git.d/gitconfig-rax

[core]
    autocrlf = input
    editor = vim 
    safecrlf = true
    pager = diff-so-fancy | less --tabs=4 -RFX
    excludesfile = ~/.git.d/gitignore
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    compression = 9

[push]
    default = simple

[alias]
    # Show all of my configured aliases
    aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
    st = status
    cl = clone 
    ci = commit
    co = checkout
    br = branch
    mr = merge
    lg = "log --oneline --color --decorate --graph"
    ps = push
    re = "remote -v"

    # various pretty loggers from various places
    lg2 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    lc = log ORIG_HEAD.. --stat --no-merges
    # from http://blog.kfish.org/2010/04/git-lola.html
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ll = log --graph --date=short

    # useful log options
    # --source
    logmine = log  --graph --decorate --oneline --branches --not --remotes=alikins
    logdev = log  --graph --decorate --oneline --branches --not --remotes=origin
    # log of local branches that are not also at origin
    # locallog = log --decorate --branches --not --remotes=origin
    # log of local branches that are not also at origin
    locallog = log --decorate --abbrev-commit --branches --not --remotes=alikins
    # from git-extras https://github.com/tj/git-extras/blob/master/bin/git-show-tree
    show-tree = log --graph --decorate --oneline --simplify-by-decoration --all

    # from https://git.wiki.kernel.org/index.php/Aliases
    # whois = !sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\\" --author=\"$1\"' -

    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

    # ignore po files in "git log", sorry translators ;-<
    slog = !sh -c 'git log --no-merges $1 `ls | grep -v ^po`' -

    hist = log --color --pretty=format:\"%C(yellow)%h%C(reset) %s%C(bold red)%d%C(reset) %C(green)%ad%C(reset) %C(blue)[%an]%C(reset)\" --relative-date --decorate
    unstage = reset HEAD --
    restore = checkout --
    cn = commit --no-verify
    praise = blame
    visualise = !gitk
    graph = log --color --graph --pretty=format:\"%h | %ad | %an | %s%d\" --date=short
    all = add . --all
    amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend
    bra = branch -av
    # Show the current branch name (usefull for shell prompts)
    brname = !git branch | grep "^*" | awk '{ print $2 }'
    brdel = branch -D
    changes = "!f() { git log --pretty=format:'* %s' $1..$2; }; f"

    # Which files are receiving the most "love"
    churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}'

    # View the log and diff for a commit (previous if no SHA1 provided)
    details = log -n1 -p --format=fuller

    # Save a repo as a tarball
    export = archive -o latest.tar.gz -9 --prefix=latest/

    # Unstage changes from the index
    unstage = reset HEAD --

    # View a pretty git log with branch tree
    g = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # Return a list of commit SHA1s
    l = "!f() { git log $* | grep '^commit ' | cut -f 2 -d ' '; }; f"

    # Remove deleted files
    r = !git ls-files -z --deleted | xargs -0 git rm

    # Return the repository's root directory (usefull for shell prompts)
    root = rev-parse --show-toplevel

    # Update all submodules
    subup = submodule update --init
    
    # List all tags
    tags = tag -l

    # show a list of tags sorted by when they were tagged
    tagage = !sh -c 'git for-each-ref --sort=taggerdate refs/tags --format=\"%(refname:short)\"'

    # show a list of tags sorted by `sort` version compare (ie, more or less rpmvercmp)
    tagsort = !sh -c 'git tag -l $1 | sort --version-sort'

    # https://github.com/prabirshrestha/ProfilesAndSettings/blob/master/.gitconfig
    # show tags and any tag annotation (tito adds tag annotations for example)
    ntags = tag -n1 -l

    # Start a new local repository and perform initial commit
    this = !git init && git add . && git commmit -m \"Initial commit.\"

    # Thin out older metadata within the repository, reduceses filesystem footprint
    trim = !git reflog expire --expire=now --all && git gc --prune=now

    # for ansible, with its submodules
    # ap = "!f() { git pull ; git submodule update --recursive } `f`"
    ap = "!f() { git pull; git submodule update --recursive; } ; f"

    # what got pushed to master in the last hour
    # based on http://stackoverflow.com/questions/3357219/expose-the-date-a-commit-was-pushed-to-a-repository
    justpushed = log origin/master@{\"1 hour ago\"}..origin/master --

    # log everything with $1 string in the diff
    timegrep = log -S

    # like above, but show the diff
    diffgrep = log -p -S

    # search logs for a bugzilla like number
    findbug = !sh -c 'git log --grep=^$1:' -

    # search for a pattern in branch names, file names, or file contents
    # find = "!f() { ((git branch -a ; git ls-files) | grep $1); git grep $1 }; f"
    find = "!f() { (git branch -a ; git ls-files) | grep $1; GIT_PAGER=cat git grep $1; }; f"

    # show what tag/release a bug was part of
    # bugrelease = "!sh -c 'git name-rev --tags --name-only  $(git log --grep ^$1: --pretty=\"format:%H\"\n")' -

    # from https://gist.github.com/492227
    lost = "!git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    # show a log without the formating, occasionaly handy for c&p
    rawlog = log --format=\"format:commit %H%nAuthor:%an%n%n%B%n\"

    # show a list of branches sorted by time of last commit.
    # This is in a seperate script now.
    # brage = "!f() { git for-each-ref --sort=committerdate refs/heads $1  --format=\"%(refname:short)\" ; }; g() { for C in $(f $1) ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; done; }; g "

    # show remote branches as well
    brageall = !git brage refs/remotes

    # TODO: make these options of 'git-brage' script
    tbrage = "!f() { git for-each-ref --sort=committerdate refs/heads $1  --format=\"%(refname:short)\" ; }; g() { for C in $(f $1) ; do UP=$(git rev-parse --symbolic-full-name --abbrev-ref $C@{upstream} 2> /dev/null); TRACKING=$?; UP=\"-> $UP \"; if [ $TRACKING -ne 0 ] ; then UP=\"\"; fi;  git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C $UP\" \"$C\" -- ; done; }; g "

    tbrageall = !git tbrage refs/remotes

    # show a list of every branch and show their latests commit, sorted by last commit
    brlog = "!sh -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\") ; do git show  -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git show --stat -s $C ; echo; done'"
    brlogremote = "!sh -c 'for C in $(git for-each-ref --sort=committerdate refs/remotes/origin --format=\"%(refname:short)\") ; do git show  -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git show --stat -s $C ; echo; done'"

    # show a list of last change in each branch of a given path
    # roly poly fileheads
    # fileheads = "!sh  -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\"| tac) ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git --no-pager log  -p -1 $C -- $0; echo; done'"

    # yesterday = "!sh  -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\"| tac) ; do git --no-pager log --since=yesterday -p -1 $C -- $0; done'"

    thisweek = "!sh  -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\"| tac) ; do git --no-pager log --since=monday -p -1 $C -- $0; done'"

    # not useful itself, but handy to remember for use in scripts
    thisbranch = rev-parse --abbrev-ref HEAD

    # remove a file from index
    unadd = git reset HEAD

    # needs python-bugzilla, and git-showbugs
    openbugs = showbugs -s NEW,ASSIGNED,NEEDINFO,FAILS_QA,REOPENED,ON_DEV
    closedbugs = showbugs -s PASSES_QA,VERIFIED,RELEASE_PENDING,CLOSED

    # show a list of files with bug fixes in them, sorted by popularity of occurance
    #  aka, list the buggy files
    # FIXME: should probably make all the bug regex stuff scripts so it's easier to customize
    buggyfiles = "!git log -M -C --format=\"format:%n\" --grep=\"^[[:digit:]]\\+:\" --name-only | grep .  | sort | uniq -c | sort -n"

    # from https://github.com/cypher/dotfiles/blob/master/gitconfig
    # See also git check-ignored: git check-ignore -n -v * --no-index
    ls-ignored = ls-files --exclude-standard --ignored --others

    # based on "buggyfiles" above and https://github.com/cypher/dotfiles/blob/master/bin/git-churn
    churn = !git log -M -C --name-only --format=\"format:%n\" | grep . | sort | uniq -c | sort -n

    # branches that are merged locally already, note this includes master itself
    lurkers = branch --merged master

    # as per https://twitter.com/jrbowes/status/304942580133679105
    # delete all local branches that have been merged into master
    #
    # note, "git branch --merged master" will helpfully include master itself
    # as a branch that has been fully merged to master. Gee, thanks git.
    #
    #  So for sanity, filter out current branch and anything named master
    #
    # Also note -d won't delete branches that aren't merged to their tracking
    # branch. Use -D if you dont care.
    #
    #  See also 'git remote prune
    purge = !git branch -d $(git branch --merged master | grep -v -e '*' -e 'master')

    # mostly from http://stackoverflow.com/questions/67699/how-do-i-clone-all-remote-branches-with-git
    # binge = "!sh -c 'for BRANCH in $(git branch -a | sed -n \"\=/HEAD$=d; \=/master$=d;s=  remotes/==p\") ; do branch --track ${BRANCH##*/} $BRANCH ; done' "
    # uh, don't do this. list authors by numbers of commits. probably needs a .mailmap
    churners = shortlog -sn --

    # burners: who last touched the most code according to annotate  see git-burners
    # alias implementation just for reference
    # burners = "!f() { for i in $(git ls-files) ; do git annotate -e $i ; done }; g() { f | awk '{print $2 }' | perl -pe 's/\\(\\<(.+@.+)\\>/\\1/' ; }; g"
    #
    # yeah, don't do this either. list authors by # of bug id's fixed
    # I suppose the really mad could make "breakers" that figures out who commits code
    # that breaks. I can save you the time, it was me. I broke it.
    fixers = !git log -M -C --format=\"format:%aN\" --grep=\"^[[:digit:]]\\+:\" | sort | uniq -c | sort -n

    # who reverts the most. Totally useless, but I like the name
    poppers = !git log -M -C --format=\"format:%aN\" --grep \"Revert\" | sort | uniq -c | sort -n

    # shorter alias
    lsg = ls-github

    # show which python classes have had the most commits
    # external script now
    # buggyclasses = "!f() { git log -M -C -p  | pcregrep -o  \"@@.*@@\\sclass\\s(.*)\\(.*\\)\"  | cut -f5 -d\'@\' | sort | uniq -c | sort -n;}; f"

    # ignore local changes to a  file
    ignore = update-index --assume-unchanged

    # http://sandofsky.com/blog/git-workflow.html
    # merge code but not history to manually recommit
    # for emergency use only
    bankrupt = merge --squash

    # https://github.com/wadey/dotfiles/blob/master/gitconfig
    # check if a branch has been merged into the current HEAD
    #  if on master, "git merged topic" will tell you if topic
    #  has been merged
    merged = !sh -c 'git rev-list HEAD | grep $(git rev-parse $0)'

    # https://github.com/aspiers/git-config/blob/master/bin/git-cdup
    # could be useful for scripts
    cdup = rev-parse --show-cdup

    # https://github.com/SixArm/sixarm_git_gitconfig/blob/master/gitconfig-alias.txt
    # Show the date of the first commit
    # (I can never remember the name of this alias, so multiple aliases...)
    log-first-date = !git log --date-order --date=iso --pretty=\"format:%ad\" --reverse | head -1
    first-commit = !git log-first-date
    oldest-commit = !git log-first-date
    repo-age = !git log-first-date

    # https://github.com/SixArm/sixarm_git_gitconfig/blob/master/gitconfig-alias.txt
    # Editing and adding conflicted files: when we get many merge conflicts
    # and want to quickly solve them using an editor, then add the  files.
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR `f`"
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

    # from https://github.com/SixArm/sixarm_git_gitconfig/blob/master/gitconfig-alias.txt
    # Thanks to jtolds on stackoverflow
    remote-ref = "!bash -c '       local_ref=$(git symbolic-ref HEAD);       local_name=${local_ref##refs/heads/};       remote=$(git config branch.\"#local_name\".remote || echo origin);       remote_ref=$(git config branch.\"$local_name\".merge);       remote_name=${remote_ref##refs/heads/};       echo remotes/$remote/$remote_name'"

    # also from https://github.com/SixArm/sixarm_git_gitconfig/blob/master/gitconfig-alias.txt
    # Thanks to jtolds on stackoverflow
    rebase-recent = !git rebase -i $(git remote-ref)

    # from http://blog.blindgaenger.net/advanced_git_aliases.html
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ = \\2/' | sort

    # http://superuser.com/a/169696
    # prettier than my version of this
    #  doesn't really work, should probably use git for-each-ref
    # heads = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"

    pconfig = config -f .git/config

    # for "reverse" bisects, where you are trying to find the
    # first working commit
    bisect-fixed = bisect bad
    bisect-unfixed = bisect good

    # from https://gist.github.com/awood/11189030
    oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
    branchdiff = "!f() { head=${2:-HEAD} ; ancestor=`git oldest-ancestor $1 $head` ; git diff $ancestor..$head ; }; f"
    visual-branchdiff = "!f() { head=${1:-HEAD} ; ancestor=`git oldest-ancestor master $head` ; git diff --name-only $ancestor..$head | xargs diffuse -s -r $ancestor ; }; f &"

    # root = !pwd
    # shell = !$1
    # shell = !$0
    # shell = !sh -c $0
    # shell = showvirtualenv systempkgtest -c 'bash'

    # find what commit a file was added
    # usage: `git whatadded --foo.c`
    whatadded = log --follow --diff-filter=A --find-renames=40%

    # checkout a tag into a branch
    checkout-tag = "!f() { tagname=${1}; branchname='${tagname}-branch'; git checkout -b '${branchname}' '${tagname}'; } ; f"

    # from http://andrewberls.com/blog/post/git-tricks-unstaging-files
    # unstage a particular file
    unstage = reset --

    # Show latest tag
    # From https://github.com/GitAlias/gitalias/blob/master/gitalias.txt
    lasttag = describe --tags --abbrev=0
    taglast = !git lasttag

    heads = !"git log --color origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"

    dlog = log devel...HEAD

# local user config, usernames, etc
[include]
    path = ~/.git.d/gitconfig-local

# Misc notes
# show a specifc version of a file
# git show rev:filename

# GIT_TRACE=true to turn on more debugging
# GIT_SSH for debug ssh stuff (needs to point to
# a wrapper script to add args, aka "ssh -v $*" in a shell script)

# From https://about.gitlab.com/2015/02/19/8-tips-to-help-you-work-better-with-git/
# useful stuff for tracking annotation/blame/attribution
# $ git blame -w  # ignores white space
# $ git blame -M  # ignores moving text
# $ git blame -C  # ignores moving text into other files
# -C -M take a number arg for number of lines to consider.
# -C -C -C will also try to find moves between any commits
#
# modified submodules
# git status --porcelain=2 --branch| grep '^.\s[A.][.M]\sS' | awk -e '{print $9}'

[color]
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    meta = 11
    commit = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "status"]
    added = yellow
    changed = green
    untracked = red

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[credential]
    helper = cache

[gitreview]
    username = luiscachog

[init]
    templatedir = ~/.git.d/git-template

[merge]
    log = true
    #ff = false
    tool = code

[rebase]
    autosquash = true
    instructionFormat = %s [%an] # add the commit author to the end of each line 

[status]
    submoduleSummary = true

[pager]
    diff = true

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[url "https://github.com/"]
    insteadOf = gh:

[url "https://gist.github.com/"]
    insteadOf = gist:

[url "https://gitlab.com/"]
    insteadOf = gl:

[url "https://bitbucket.org/"]
    insteadOf = bb:

[filter "spacify"]
    clean = expand --tabs=4 --initial
    smudge = expand --tabs=4 --initial

[ssh]
    postBuffer = 2048M
    maxRequestBuffer = 1024M

[http]
    postBuffer = 2048M
    maxRequestBuffer = 1024M

[https]
    postBuffer = 1048576000

[commit]
    template = ~/.git.d/stCommitMsg
    gpgSign = false

[pack]
    windowMemory = 256m
    packSizeLimit = 256m
[gpg]
    program = null
[tag]
    forceSignAnnotated = false
